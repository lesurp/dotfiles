# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet helloworld "Initialize a basic python script because we're lazy"
#!/usr/bin/env python3
import argparse
import logging
import time
from logging import info, warn


def _parse_args():
    p = argparse.ArgumentParser()
    p.add_argument("--verbose", "-v", action="count", default=0)
    return p.parse_args()


def _init_logging(verbosity_flag):
    levels = {0: logging.WARN, 1: logging.INFO, 2: logging.DEBUG}
    verbosity_flag = min(verbosity_flag, next(reversed(levels.keys())))
    level = levels[verbosity_flag]
    if level is None:
        warn(
            f"Invalid value ({verbosity_flag}) passed when initializing logging. Ignoring and defaulting to warning"
        )
        level = logging.WARN
    logging.basicConfig(level=level, format="%(asctime)s %(levelname)s - %(message)s")
    logging.Formatter.converter = time.gmtime


def main():
    args = _parse_args()
    _init_logging(args.verbose)
    info(f"Arguments: {vars(args)}")


if __name__ == "__main__":
    main()
endsnippet
