#!/bin/bash

function load_toolchain {
    # default toolchain
    cxx="clang++"
    cc="clang"

    case "$1" in
        "gcc" | "g++" | "gnu")
            echo -e "Generating with \e[34mgcc/g++\e[0m..."
            cxx="g++"
            cc="gcc"
            ;;
        "clang" | "clang++" | "llvm")
            echo -e "Generating with \e[34mclang/clang++\e[0m..."
            cxx="clang++"
            cc="clang"
            ;;
        "")
            echo -e "Generating with default compiler: \e[33m$cc / $cxx\e[0m"
            ;;
        *)
            echo -e "\e[31mRequested toolchain is unknwown!\e[0m"
            exit 1
            ;;
    esac

    # that's how we setup the compiler to cmake...
    export CXX=$cxx
    export CC=$cc
}

function find_cmakelists {
    # either cwd is the build directory, or we are in the source dir
    # then the build dir is simple 'build'
    if [ -f "CMakeLists.txt" ]
    then
        cmakefile_dir=".."
        build_dir="build"
    elif [ -f "../CMakeLists.txt" ]
    then
        cmakefile_dir=".."
        build_dir="."
    else
        echo -e "\e[31mCannot find the location of CMakeLists.txt (and consequently of the build directory)\e[0m"
        exit 1
    fi

    mkdir -p $build_dir
    cd $build_dir
}

function check_existing_programs {
    if [ -x "$(command -v ccache)" ]
    then
        echo -e "Using \e[32mccache\e[0m"
        maybe_ccache="-DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
    else
        echo -e "\e[31mccache\e[0m not found"
        maybe_ccache=""
    fi

    if [ -x "$(command -v ninja)" ]
    then
        echo -e "Using \e[32mNinja\e[0m as a generator"
        generator="-GNinja"
    else
        echo -e "\e[33mUsing default generator\e[0m"
        generator=""
    fi
}

function select_build_type {
    case "$1" in
        "r" | "rel" | "release")
            build_type="Release"
            echo -e "Build type: \e[32m$build_type\e[0m"
            ;;
        "d" | "dbg" | "debug")
            build_type="Debug"
            echo -e "Build type: \e[32m$build_type\e[0m"
            ;;
        "rd" | "rdbg" | "relwithdebinfo")
            build_type="RelWithDebInfo"
            echo -e "Build type: \e[32m$build_type\e[0m"
            ;;
        "")
            build_type="RelWithDebInfo"
            echo -e "Default build type: \e[33m$build_type\e[0m"
            ;;
        *)
            echo -e "\e[31mRequested build type is invalid!\e[0m"
            exit 1
            ;;
    esac
}

load_toolchain $1
find_cmakelists
check_existing_programs
select_build_type $2

cmd="cmake -DCMAKE_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=$build_type $maybe_ccache $generator $cmakefile_dir"

output=`$cmd 2>&1`

# print the output only if cmake command has failed
if [ $? -ne 0 ]
then
    echo -e "\e[31mCMake command failed!\e[0m"
    echo -e "\e[31mThe command:\e[0m"
    echo -e "$cmd"
    echo -e "\e[31mAnd the resulting output:\e[0m"
    echo -e "$output"
else
    echo -e "\e[32mCMake ran successfully\e[0m"
fi

### README 
## Arguments
#
#    toolchain (clang/gcc)
#    build type (rel/rdbg/dbg)
#
## Others
#
#    Uses ccache if found
#    uses Ninja or Make otherwise
#    If there's a CMakeLists.txt in the current dir, create a build dir and runs the command there, otherwise look for the CMakeLists.txt in the parent directory (and then runs the command in the initial dir)
#
## TODO
#
#   make a --help rather than those comments...
